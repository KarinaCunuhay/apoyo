/*
<!-- IServicio
 [OperationContract]
        [WebGet(UriTemplate = "getPregunta1",
            RequestFormat = WebMessageFormat.Json,
            ResponseFormat = WebMessageFormat.Json)]
        List<Pregunta1Entidades> DevolverPregunta1();
-------
LINQ
 public static List<Pregunta1Entidades> DevolverPregunta1()
        {
			try
			{
				List<Pregunta1Entidades> lista1 = new List<Pregunta1Entidades> ();
				List<Pregunta1> lista1LINQ = new List<Pregunta1> ();
				using (var contexto = new LinqDataContext())
				{
					var resultado = from p in contexto.Pregunta1
									select p;
					lista1LINQ = resultado.ToList();	
				}
				foreach (var item in lista1LINQ)
				{
					lista1.Add(new Pregunta1Entidades(
							item.ciudad,
							item.victimas));

				}
				return lista1;
			}
			catch (Exception)
			{

				throw;
			}
        }
----
 	WEBCONFIG
<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>
  <system.web>
    <compilation debug="true" targetFramework="4.7.2" />
    <httpRuntime targetFramework="4.7.2"/>
  </system.web>
  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- Para evitar revelar información de los metadatos, establezca los valores siguientes en false antes de la implementación -->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <!-- Para recibir detalles de las excepciones en los errores para la depuración, establezca el siguiente valor en true. Para no revelar información sobre las excepciones establézcalo en false antes de la implementación -->
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
		<endpointBehaviors>
			<behavior name="web">
				<webHttp />
			</behavior>
		</endpointBehaviors>
	</behaviors>
	<bindings>
		<webHttpBinding>
			<binding name="webHttpBindingJson" crossDomainScriptAccessEnabled="true"/>
		</webHttpBinding>
	</bindings>
	<services>
		<service name="WcfService1.Service1">
			<endpoint address="" binding="webHttpBinding" bindingConfiguration="webHttpBindingJson"
					  contract="WcfService1.IService1" behaviorConfiguration="web">
			</endpoint>
		</service>
	</services>
    <protocolMapping>
        <add binding="basicHttpsBinding" scheme="https" />
    </protocolMapping>    
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
  <system.webServer>
		  <httpProtocol>
			  <customHeaders>
				  <add name="Access-Control-Allow-Origin" value="*" />
				  <add name="Access-Control-Allow-Methods" value="*" />
				  <add name="Access-Control-Allow-Headers" value="Content-Type, x-requested" />
			  </customHeaders>
		  </httpProtocol>
    <modules runAllManagedModulesForAllRequests="true"/>
    <!--
        Para examinar el directorio raíz de la aplicación web durante la depuración, establezca el valor siguiente en true.
        Establézcalo en false antes de la implementación para evitar revelar información sobre la carpeta de aplicación web.
      -->
    <directoryBrowse enabled="true"/>
  </system.webServer>
</configuration>

----
JS Consumo
const get1 = async () => {
  const content = document.getElementById("infoJson");

  while (content.firstChild) {
    content.removeChild(content.firstChild);
  }

  try {
    const response = await fetch(
      "http://localhost:61527/Service1.svc/getPregunta1",
      { mode: "cors", method: "GET" }
    );

    if (!response.ok) {
      throw new Error("Error en la solicitud de datos");
    }

    const json = await response.json();

    const rows = json.map((e) => {
      const row = document.createElement("tr");

      Object.entries(e).forEach(([key, value]) => {
        const cell = document.createElement("td");
        const text = document.createTextNode(value);
        cell.appendChild(text);
        row.appendChild(cell);
      });

      return row;
    });

    rows.forEach((row) => content.appendChild(row));
  } catch (error) {
    console.error(error);
    // Aquí puedes manejar el error, por ejemplo, mostrar un mensaje en el DOM.
  
  }
};
------
html consumo
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Consumo Servicio JSON</title>
  <!-- Agrega los enlaces a los archivos CSS de Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" 
  rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
  <script src="/Cliente_Json/consumoServicio.js"></script>
  <style>
    .btn-custom:hover {
      background-color: #17a2b8;
      color: #fff;
    }
    h1,h2{
        text-align: center;
        font-family: 'Montserrat', sans-serif;
    }
    .mb-3{
        display: flex;
        justify-content: center;
        align-items: center; 
        margin: 10px;
    }
   
    .table {
    font-size: 0.9rem; // Reducir el tamaño de fuente 
    }

   .table td,
    .table th {
       padding: 0.25rem; // Reducir el espaciado interno de las celdas
   }
   
  </style>
</head>
<body>
  <div class="container">
    <h1>Consumo de Servicio - Cliente JSON </h1>
    <div class="mb-3">
      <button class="btn btn-primary btn-custom mb-3" onclick="get1()">Pregunta1</button>
      <button class="btn btn-primary btn-custom mb-3" onclick="get2()">Pregunta6</button>


   </div>
    <table class="table table-sm table-striped table-bordered table-hover" id="datosExcel">
        
        <table id="infoJson"></table>
      </tbody>
      </table>
  </div>
  <!-- Agrega los enlaces a los archivos JavaScript de Bootstrap -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
-->
*/