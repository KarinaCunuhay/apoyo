**crear
db.libros.insertMany([
	{
	_id: 3,
	codigo:3,
	nombre: 'Libro3',
	autor: 'Karina',
	editoriales: ['Planeta'],
	paginas: 200
},
{
	_id: 4,
	codigo:4,
	nombre: 'Libro4',
	autor: 'Frank ',
	editoriales: ['Sevilla'],
	paginas: 600

},
{	_id: 5,
	codigo:5,
	nombre: 'Caperuza',
	autor: 'Mateo Moya',
	editoriales: ['Editorial5'],
	paginas: 350
}.
db.libros.insertOne(
{	_id: 7,
	codigo: 7,
	nombre: 'El arte de la cocina',
	autor: 'Chau La Fan',
	editoriales: ['Editorial5' ,'Oveja Negra' ,'Otros'],
	paginas: 350,
	cantidad :200,
	precio: 15,
	fechaPublicacion: new Date(),
	fechaVenta : new Date(2020,11,1)
})


**Añadir
db.libros.updateMany({_id : {$eq:3}},{$set:{precio:45, cantidad:18}})
db.libros.updateMany({_id : {$eq:4}},{$set:{precio:30, cantidad:28}})
db.libros.updateMany({_id : {$eq:5}},{$set:{precio:50, cantidad:78}})

**Negación
 db.libros.find({precio: {$not: {$gte:50}}})
 **Ordena de nmanera ascendente
 db.libros.find().sort({nombre:1}) /-1 descendente
 
**limit (top3 en sql)
db.libros.find().limit(2)
**busca coincidencias
db.libros.find({'comentarios.lector':'Carolina Pazmiño'})
-----------------------------------------------------------------------
mongosh
use heroes
db.estudio.insertOne({ name: "John", age: 30, city: "New York" })
db.estudio.find()
db.estudio.aggregate([
  {
    $match: {
      ages: { $gte: 18 },
      city: "New York"
    }
  }
])
-----------------------------------------------------------------------
$limit, $skip, $lookup, $unwind
***agrupando documentos de la colección "sales" según el campo "product". 
Luego, calculamos la suma de la cantidad ("quantity") y el promedio del precio ("price") 
para cada grupo.*****

db.sales.aggregate([
  {
    $group: {
      _id: "$product",
      totalSales: { $sum: "$quantity" },
      avgPrice: { $avg: "$price" }
    }
  }
])
*****************************************************
**ordena los documentos de la colección "users" según el campo "age" en orden ascendente.**
db.users.aggregate([
  {
    $sort: { age: 1 }
  }
])
***************************************************
**utilizamos $project para proyectar solo los campos "orderDate" y "total" en la salida.
 Además, convertimos el campo "orderDate" en un formato de fecha específico y calculamos 
el campo "total" multiplicando los valores de "price" y "quantity".****

db.orders.aggregate([
  {
    $project: {
      _id: 0,
      orderDate: { $dateToString: { format: "%Y-%m-%d", date: "$orderDate" } },
      total: { $multiply: ["$price", "$quantity"] }
    }
  }
])
---------------------------------------------------------------------
 db.Libros.find({status :/^P/}).count();
363

1997,2001, 2005
db.Companias.find({founded_year:1996]).count();
















